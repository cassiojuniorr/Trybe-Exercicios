use('class');

// Exercício 1 Altere o imdbRating para 7.7 no filme Batman.
db.movies.update({ title: 'Batman' }, { $set: { imdbRating: 7.7 } })

// Exercício 2 Altere budget para 1 no filme Godzilla.
db.movies.update({ title: 'Godzilla' }, { $set: { budget: 1 } })

// Exercício 3: Altere budget para 15 e imdbRating para 5.5 no filme Home Alone.
db.movies.update({ title: 'Home Alone' }, { $set: { budget: 15, imdbRating: 5.5 } })

// Exercício 4: Aumente em 2 o imdbRating do filme Batman.
// db.movies.update({ title: 'Batman' }, { $inc: { imdbRating: 2 } })

// Exercício 5: Utilizando uma única operação, crie um campo chamado sequels e atribua 
// a ele o valor 0 em todos os documentos.

db.movies.updateMany({}, { $set: { sequels: 0 } })

// Exercício 6: Utilizando o operador $currentDate, crie um campo chamado lastUpdated com 
// o tipo timestamp no filme Home Alone.

db.movies.update({ title: 'Home Alone' },
 { $currentDate: { lastUpdated: { $type: 'timestamp' } } }
)

// Exercício 7: Para os filmes Batman ou Home Alone, atribua a imdbRating o valor 17, 
// caso o valor de imdbRating seja menor que 17.

db.movies.updateMany(
    {
        $or: [
            { title: 'Batman' },
            { title: 'Home Alone' }
        ]
    }, 
    { $max: { imdbRating: 17 } }
)

db.movies.find()

